#include <iostream>
#include <cstring>
#include "Memory.h"
#include "Gb_bus.h"

static const BYTE bootrom[256] =
{
    0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,
    0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,
    0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,
    0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,
    0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,
    0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,
    0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,
    0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,
    0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xE2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,
    0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,
    0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,
    0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,
    0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,
    0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3C, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,
    0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,
    0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50
};

BYTE Mem_mu::read(WORD addr) const {
	// DMa edge cases.
	if(addr >= 0xfe00 && addr <= 0xfea0){
		if(m_dma_lastcycle){
			return 0xff;
		}
		else if(m_dma_restarted) return 0xff;
		else if(m_dma_pending == 0 || m_dma_pending >= (160 * 4)) return m_OAM[addr - 0xfe00];
		else return 0xff;
	}
	if(addr >= 0x8000 && addr <= 0x9fff) return m_vram[addr - 0x8000];
	if(addr >= 0xc000 && addr <= 0xcfff) return m_wram[addr- 0xc000];
	if(addr >= 0xd000 && addr <= 0xdfff) return m_wram2[addr - 0xd000]; // maybe moved to cart
	if(addr >= 0xe000 && addr <= 0xfdff) return read_wram_mirror(addr);
	if(addr >= 0xfea0 && addr <= 0xfeff) return 0x00;
	if(addr >= 0xff80 && addr <= 0xfffe) return m_hram[addr - 0xff80];
	std::cout << "read unimplemented " << std::hex << (unsigned int)addr << std::endl;
	return 0xff;
};

BYTE Mem_mu::read_wram_mirror(WORD addr) const {
	WORD offset = addr - 0x2000;
	if(offset >= 0xc000 && offset <= 0xcfff)
		return m_wram[offset - 0xc000];
	else{
		return m_wram2[offset - 0xd000];
	}
}

void Mem_mu::write_wram_mirror(WORD addr, BYTE value){
	// echo to work ram
	WORD mem_offset = (addr - (0x2000));
	if(mem_offset >= 0xc000 && mem_offset <= 0xcfff) 
		m_wram[mem_offset - 0xc000] = value;
	else if(mem_offset >= 0xd000 && mem_offset <= 0xdfff){
		m_wram2[mem_offset - 0xd000] = value;
	}
};

void Mem_mu::write_wram(WORD addr, BYTE value){
	if(addr >= 0xc000 && addr <= 0xcfff)
		m_wram[addr - 0xc000] = value;
	else if(addr >= 0xd000 && addr <= 0xdfff) 
		m_wram2[addr - 0xd000] = value;
}

void Mem_mu::write(WORD addr, BYTE value){
	if(addr >= 0x8000 && addr <= 0x9fff) m_vram[addr - 0x8000] = value;
	else if(addr >= 0xfea0 && addr <= 0xfeff) return; //prohibited
	else if(addr >= 0xe000 && addr <= 0xfdff) write_wram_mirror(addr, value);
	else if(addr >= 0xc000 && addr <= 0xdfff) write_wram(addr, value);
	else if(addr >= 0xfe00 && addr <= 0xfe9f){
		m_OAM[addr - 0xfe00] = value;
	}else if(addr >= 0xff80 && addr <= 0xfffe){ // high ram
		m_hram[addr - 0xff80] = value;
	}else{
		std::cout << "write unimplemented " << std::hex << (unsigned int)addr << std::endl;
	}
};

void Mem_mu::init(Gb_bus * bus){
	memset(m_vram, 0, 1024 * 8);
	memset(m_hram, 0, 127);
	memset(m_wram, 0, 1024 * 4);
	memset(m_wram2, 0, 1024 * 4);
	memset(m_OAM, 0, 40 * 4);
	m_bus = bus;
};

void Mem_mu::setup_DMA(unsigned char value){
	m_dma_restarted = m_dma_pending > 0;
	const int dma_delay = 8; // internal dma delay
	m_dma_pending = (160 * 4) + dma_delay; // 160 machines cycles + 4 clock setup.
	m_DMA_src = value * 0x100;
	m_dma_done = false;
	m_dma_reg = value;
};

void Mem_mu::DMA_transfer(WORD DMA_src){
	if(DMA_src < 0xff80 && DMA_src > 0xfffe) return;
	for(int i = 0; i < 160; i++){
		m_OAM[i] = m_bus->read(DMA_src + i);
	};
};

void Mem_mu::update_DMA(int cycles){
	if(m_prev_cycles > cycles) // an entire frame has elapsed
		m_prev_cycles = 0;

	int delta = cycles - m_prev_cycles;
	m_prev_cycles = cycles;

	if(!m_dma_pending){
		m_dma_lastcycle = false;
		return;
	}

	m_dma_pending -= delta;
	if(m_dma_pending <= 0) // edge case: OAM read aligned with last DMA cycle.
		m_dma_lastcycle = true;

	if(!m_dma_done && (m_dma_pending >= 160 * 4)) // delay has not elpased yet.
		return;

	m_dma_restarted = false;

	if(!m_dma_done){
		DMA_transfer(m_DMA_src);
		m_dma_done = true;
	}else{
		m_dma_pending = m_dma_pending <= 0 ? 0 : m_dma_pending;
	}
};

void Mem_mu::debug(){
};


















